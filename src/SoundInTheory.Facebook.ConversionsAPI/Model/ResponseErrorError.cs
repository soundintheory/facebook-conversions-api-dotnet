/*
 * Facebook Conversions API (for Web)
 *
 * The Conversions API (for web) allows advertisers to send web events from their servers directly to Facebook. Conversions API events are linked to a pixel and are processed like browser pixel events. This means that these conversion events are used in measurement, reporting, and optimization in the same way as browser pixel events.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: web_signals_integrations@fb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SoundInTheory.Facebook.ConversionsAPI.Client.OpenAPIDateConverter;

namespace SoundInTheory.Facebook.ConversionsAPI.Model
{
    /// <summary>
    /// ResponseErrorError
    /// </summary>
    [DataContract]
    public partial class ResponseErrorError :  IEquatable<ResponseErrorError>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResponseErrorError" /> class.
        /// </summary>
        /// <param name="code">code.</param>
        /// <param name="messages">messages.</param>
        /// <param name="type">type.</param>
        /// <param name="fbtraceId">fbtraceId.</param>
        /// <param name="errorSubcode">errorSubcode.</param>
        /// <param name="isTransient">isTransient.</param>
        /// <param name="errorUserTitle">errorUserTitle.</param>
        /// <param name="errorUserMsg">errorUserMsg.</param>
        public ResponseErrorError(string code = default(string), string messages = default(string), string type = default(string), string fbtraceId = default(string), string errorSubcode = default(string), string isTransient = default(string), string errorUserTitle = default(string), string errorUserMsg = default(string))
        {
            this.Code = code;
            this.Messages = messages;
            this.Type = type;
            this.FbtraceId = fbtraceId;
            this.ErrorSubcode = errorSubcode;
            this.IsTransient = isTransient;
            this.ErrorUserTitle = errorUserTitle;
            this.ErrorUserMsg = errorUserMsg;
        }

        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="code", EmitDefaultValue=false)]
        public string Code { get; set; }

        /// <summary>
        /// Gets or Sets Messages
        /// </summary>
        [DataMember(Name="messages", EmitDefaultValue=false)]
        public string Messages { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets FbtraceId
        /// </summary>
        [DataMember(Name="fbtrace_id", EmitDefaultValue=false)]
        public string FbtraceId { get; set; }

        /// <summary>
        /// Gets or Sets ErrorSubcode
        /// </summary>
        [DataMember(Name="error_subcode", EmitDefaultValue=false)]
        public string ErrorSubcode { get; set; }

        /// <summary>
        /// Gets or Sets IsTransient
        /// </summary>
        [DataMember(Name="is_transient", EmitDefaultValue=false)]
        public string IsTransient { get; set; }

        /// <summary>
        /// Gets or Sets ErrorUserTitle
        /// </summary>
        [DataMember(Name="error_user_title", EmitDefaultValue=false)]
        public string ErrorUserTitle { get; set; }

        /// <summary>
        /// Gets or Sets ErrorUserMsg
        /// </summary>
        [DataMember(Name="error_user_msg", EmitDefaultValue=false)]
        public string ErrorUserMsg { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResponseErrorError {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Messages: ").Append(Messages).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FbtraceId: ").Append(FbtraceId).Append("\n");
            sb.Append("  ErrorSubcode: ").Append(ErrorSubcode).Append("\n");
            sb.Append("  IsTransient: ").Append(IsTransient).Append("\n");
            sb.Append("  ErrorUserTitle: ").Append(ErrorUserTitle).Append("\n");
            sb.Append("  ErrorUserMsg: ").Append(ErrorUserMsg).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResponseErrorError);
        }

        /// <summary>
        /// Returns true if ResponseErrorError instances are equal
        /// </summary>
        /// <param name="input">Instance of ResponseErrorError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResponseErrorError input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Messages == input.Messages ||
                    (this.Messages != null &&
                    this.Messages.Equals(input.Messages))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FbtraceId == input.FbtraceId ||
                    (this.FbtraceId != null &&
                    this.FbtraceId.Equals(input.FbtraceId))
                ) && 
                (
                    this.ErrorSubcode == input.ErrorSubcode ||
                    (this.ErrorSubcode != null &&
                    this.ErrorSubcode.Equals(input.ErrorSubcode))
                ) && 
                (
                    this.IsTransient == input.IsTransient ||
                    (this.IsTransient != null &&
                    this.IsTransient.Equals(input.IsTransient))
                ) && 
                (
                    this.ErrorUserTitle == input.ErrorUserTitle ||
                    (this.ErrorUserTitle != null &&
                    this.ErrorUserTitle.Equals(input.ErrorUserTitle))
                ) && 
                (
                    this.ErrorUserMsg == input.ErrorUserMsg ||
                    (this.ErrorUserMsg != null &&
                    this.ErrorUserMsg.Equals(input.ErrorUserMsg))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Code != null)
                    hashCode = hashCode * 59 + this.Code.GetHashCode();
                if (this.Messages != null)
                    hashCode = hashCode * 59 + this.Messages.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.FbtraceId != null)
                    hashCode = hashCode * 59 + this.FbtraceId.GetHashCode();
                if (this.ErrorSubcode != null)
                    hashCode = hashCode * 59 + this.ErrorSubcode.GetHashCode();
                if (this.IsTransient != null)
                    hashCode = hashCode * 59 + this.IsTransient.GetHashCode();
                if (this.ErrorUserTitle != null)
                    hashCode = hashCode * 59 + this.ErrorUserTitle.GetHashCode();
                if (this.ErrorUserMsg != null)
                    hashCode = hashCode * 59 + this.ErrorUserMsg.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
