/*
 * Facebook Conversions API (for Web)
 *
 * The Conversions API (for web) allows advertisers to send web events from their servers directly to Facebook. Conversions API events are linked to a pixel and are processed like browser pixel events. This means that these conversion events are used in measurement, reporting, and optimization in the same way as browser pixel events.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: web_signals_integrations@fb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SoundInTheory.Facebook.ConversionsAPI.Client.OpenAPIDateConverter;

namespace SoundInTheory.Facebook.ConversionsAPI.Model
{
    /// <summary>
    /// EventRequest
    /// </summary>
    [DataContract]
    public partial class EventRequest :  IEquatable<EventRequest>, IValidatableObject
    {
        /// <summary>
        /// Partner agent string.
        /// </summary>
        /// <value>Partner agent string.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PartnerAgentEnum
        {
            /// <summary>
            /// Enum Swagger for value: swagger
            /// </summary>
            [EnumMember(Value = "swagger")]
            Swagger = 1

        }

        /// <summary>
        /// Partner agent string.
        /// </summary>
        /// <value>Partner agent string.</value>
        [DataMember(Name="partner_agent", EmitDefaultValue=true)]
        public PartnerAgentEnum PartnerAgent { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventRequest" /> class.
        /// </summary>
        /// <param name="data">An array of Server Event objects. (required).</param>
        /// <param name="testEventCode">Code used to verify that your server events are received correctly by Facebook. Use this code to test your server events in the Test Events feature in Events Manager. See Test Events Tool (https://developers.facebook.com/docs/marketing-api/conversions-api/using-the-api#testEvents) for an example..</param>
        /// <param name="partnerAgent">Partner agent string. (required) (default to PartnerAgentEnum.Swagger).</param>
        public EventRequest(List<ModelEvent> data = default(List<ModelEvent>), string testEventCode = default(string), PartnerAgentEnum partnerAgent = PartnerAgentEnum.Swagger)
        {
            // to ensure "data" is required (not null)
            if (data == null)
            {
                throw new InvalidDataException("data is a required property for EventRequest and cannot be null");
            }
            else
            {
                this.Data = data;
            }

            // to ensure "partnerAgent" is required (not null)
            if (partnerAgent == null)
            {
                throw new InvalidDataException("partnerAgent is a required property for EventRequest and cannot be null");
            }
            else
            {
                this.PartnerAgent = partnerAgent;
            }

            this.TestEventCode = testEventCode;
        }

        /// <summary>
        /// An array of Server Event objects.
        /// </summary>
        /// <value>An array of Server Event objects.</value>
        [DataMember(Name="data", EmitDefaultValue=true)]
        public List<ModelEvent> Data { get; set; }

        /// <summary>
        /// Code used to verify that your server events are received correctly by Facebook. Use this code to test your server events in the Test Events feature in Events Manager. See Test Events Tool (https://developers.facebook.com/docs/marketing-api/conversions-api/using-the-api#testEvents) for an example.
        /// </summary>
        /// <value>Code used to verify that your server events are received correctly by Facebook. Use this code to test your server events in the Test Events feature in Events Manager. See Test Events Tool (https://developers.facebook.com/docs/marketing-api/conversions-api/using-the-api#testEvents) for an example.</value>
        [DataMember(Name="test_event_code", EmitDefaultValue=false)]
        public string TestEventCode { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventRequest {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  TestEventCode: ").Append(TestEventCode).Append("\n");
            sb.Append("  PartnerAgent: ").Append(PartnerAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EventRequest);
        }

        /// <summary>
        /// Returns true if EventRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EventRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Data == input.Data ||
                    this.Data != null &&
                    input.Data != null &&
                    this.Data.SequenceEqual(input.Data)
                ) && 
                (
                    this.TestEventCode == input.TestEventCode ||
                    (this.TestEventCode != null &&
                    this.TestEventCode.Equals(input.TestEventCode))
                ) && 
                (
                    this.PartnerAgent == input.PartnerAgent ||
                    (this.PartnerAgent != null &&
                    this.PartnerAgent.Equals(input.PartnerAgent))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Data != null)
                    hashCode = hashCode * 59 + this.Data.GetHashCode();
                if (this.TestEventCode != null)
                    hashCode = hashCode * 59 + this.TestEventCode.GetHashCode();
                if (this.PartnerAgent != null)
                    hashCode = hashCode * 59 + this.PartnerAgent.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
