/*
 * Facebook Conversions API (for Web)
 *
 * The Conversions API (for web) allows advertisers to send web events from their servers directly to Facebook. Conversions API events are linked to a pixel and are processed like browser pixel events. This means that these conversion events are used in measurement, reporting, and optimization in the same way as browser pixel events.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: web_signals_integrations@fb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SoundInTheory.Facebook.ConversionsAPI.Client.OpenAPIDateConverter;

namespace SoundInTheory.Facebook.ConversionsAPI.Model
{
    /// <summary>
    /// ModelEvent
    /// </summary>
    [DataContract]
    public partial class ModelEvent :  IEquatable<ModelEvent>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ModelEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ModelEvent" /> class.
        /// </summary>
        /// <param name="eventName">A Facebook pixel Standard Event or Custom Event name. This field is used to deduplicate events sent by both Facebook Pixel and Conversions API. event_id is also used in deduplication. For the same customer action, event from the browser event match event_name from the server event. If we find a match between events sent within 48 hours of each other, we only consider the first one. If a server and browser event arrive at approximately the same time (within 5 minutes of each other), we favor the browser event. (required).</param>
        /// <param name="eventTime">A Unix timestamp in seconds indicating when the actual event occurred. The specified time may be earlier than the time you send the event to Facebook. This is to enable batch processing and server performance optimization. event_time can be up to 7 days before you send an event to Facebook. If any event_time in data is greater than 7 days in the past, we return an error for the entire request and process no events. (required).</param>
        /// <param name="eventSourceUrl">The browser URL where the event happened..</param>
        /// <param name="optOut">A flag that indicates we should not use this event for ads delivery optimization. If set to true, we only use the event for attribution..</param>
        /// <param name="eventId">This ID can be any unique string chosen by the advertiser. event_id is used to deduplicate events sent by both Facebook Pixel and Conversions API. event_name is also used in deduplication. For deduplication, the eventID from a browser event must match the event_id in the corresponding server event..</param>
        /// <param name="actionSource">This field allows you to specify where your conversions occurred. Knowing where your events took place helps ensure your ads go to the right people. See docs for the allowable values. https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/server-event#action-source (required).</param>
        /// <param name="userData">userData (required).</param>
        /// <param name="customData">customData.</param>
        /// <param name="dataProcessingOptions">Processing options you would like to enable for a specific event. For more details see: https://developers.facebook.com/docs/marketing-apis/data-processing-options..</param>
        /// <param name="dataProcessingOptionsCountry">The country that you want to associate to this data processing option. If you set a country, you must also set a state. For more details see: https://developers.facebook.com/docs/marketing-apis/data-processing-options.</param>
        /// <param name="dataProcessingOptionsState">The state that you want to associate with this data processing option. For more details see: https://developers.facebook.com/docs/marketing-apis/data-processing-options..</param>
        public ModelEvent(string eventName = default(string), long eventTime = default(long), string eventSourceUrl = default(string), bool optOut = default(bool), string eventId = default(string), string actionSource = default(string), UserData userData = default(UserData), CustomData customData = default(CustomData), List<string> dataProcessingOptions = default(List<string>), int dataProcessingOptionsCountry = default(int), int dataProcessingOptionsState = default(int))
        {
            // to ensure "eventName" is required (not null)
            if (eventName == null)
            {
                throw new InvalidDataException("eventName is a required property for ModelEvent and cannot be null");
            }
            else
            {
                this.EventName = eventName;
            }

            // to ensure "eventTime" is required (not null)
            if (eventTime == null)
            {
                throw new InvalidDataException("eventTime is a required property for ModelEvent and cannot be null");
            }
            else
            {
                this.EventTime = eventTime;
            }

            // to ensure "actionSource" is required (not null)
            if (actionSource == null)
            {
                throw new InvalidDataException("actionSource is a required property for ModelEvent and cannot be null");
            }
            else
            {
                this.ActionSource = actionSource;
            }

            // to ensure "userData" is required (not null)
            if (userData == null)
            {
                throw new InvalidDataException("userData is a required property for ModelEvent and cannot be null");
            }
            else
            {
                this.UserData = userData;
            }

            this.EventSourceUrl = eventSourceUrl;
            this.OptOut = optOut;
            this.EventId = eventId;
            this.CustomData = customData;
            this.DataProcessingOptions = dataProcessingOptions;
            this.DataProcessingOptionsCountry = dataProcessingOptionsCountry;
            this.DataProcessingOptionsState = dataProcessingOptionsState;
        }

        /// <summary>
        /// A Facebook pixel Standard Event or Custom Event name. This field is used to deduplicate events sent by both Facebook Pixel and Conversions API. event_id is also used in deduplication. For the same customer action, event from the browser event match event_name from the server event. If we find a match between events sent within 48 hours of each other, we only consider the first one. If a server and browser event arrive at approximately the same time (within 5 minutes of each other), we favor the browser event.
        /// </summary>
        /// <value>A Facebook pixel Standard Event or Custom Event name. This field is used to deduplicate events sent by both Facebook Pixel and Conversions API. event_id is also used in deduplication. For the same customer action, event from the browser event match event_name from the server event. If we find a match between events sent within 48 hours of each other, we only consider the first one. If a server and browser event arrive at approximately the same time (within 5 minutes of each other), we favor the browser event.</value>
        [DataMember(Name="event_name", EmitDefaultValue=true)]
        public string EventName { get; set; }

        /// <summary>
        /// A Unix timestamp in seconds indicating when the actual event occurred. The specified time may be earlier than the time you send the event to Facebook. This is to enable batch processing and server performance optimization. event_time can be up to 7 days before you send an event to Facebook. If any event_time in data is greater than 7 days in the past, we return an error for the entire request and process no events.
        /// </summary>
        /// <value>A Unix timestamp in seconds indicating when the actual event occurred. The specified time may be earlier than the time you send the event to Facebook. This is to enable batch processing and server performance optimization. event_time can be up to 7 days before you send an event to Facebook. If any event_time in data is greater than 7 days in the past, we return an error for the entire request and process no events.</value>
        [DataMember(Name="event_time", EmitDefaultValue=true)]
        public long EventTime { get; set; }

        /// <summary>
        /// The browser URL where the event happened.
        /// </summary>
        /// <value>The browser URL where the event happened.</value>
        [DataMember(Name="event_source_url", EmitDefaultValue=false)]
        public string EventSourceUrl { get; set; }

        /// <summary>
        /// A flag that indicates we should not use this event for ads delivery optimization. If set to true, we only use the event for attribution.
        /// </summary>
        /// <value>A flag that indicates we should not use this event for ads delivery optimization. If set to true, we only use the event for attribution.</value>
        [DataMember(Name="opt_out", EmitDefaultValue=false)]
        public bool OptOut { get; set; }

        /// <summary>
        /// This ID can be any unique string chosen by the advertiser. event_id is used to deduplicate events sent by both Facebook Pixel and Conversions API. event_name is also used in deduplication. For deduplication, the eventID from a browser event must match the event_id in the corresponding server event.
        /// </summary>
        /// <value>This ID can be any unique string chosen by the advertiser. event_id is used to deduplicate events sent by both Facebook Pixel and Conversions API. event_name is also used in deduplication. For deduplication, the eventID from a browser event must match the event_id in the corresponding server event.</value>
        [DataMember(Name="event_id", EmitDefaultValue=false)]
        public string EventId { get; set; }

        /// <summary>
        /// This field allows you to specify where your conversions occurred. Knowing where your events took place helps ensure your ads go to the right people. See docs for the allowable values. https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/server-event#action-source
        /// </summary>
        /// <value>This field allows you to specify where your conversions occurred. Knowing where your events took place helps ensure your ads go to the right people. See docs for the allowable values. https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/server-event#action-source</value>
        [DataMember(Name="action_source", EmitDefaultValue=true)]
        public string ActionSource { get; set; }

        /// <summary>
        /// Gets or Sets UserData
        /// </summary>
        [DataMember(Name="user_data", EmitDefaultValue=true)]
        public UserData UserData { get; set; }

        /// <summary>
        /// Gets or Sets CustomData
        /// </summary>
        [DataMember(Name="custom_data", EmitDefaultValue=false)]
        public CustomData CustomData { get; set; }

        /// <summary>
        /// Processing options you would like to enable for a specific event. For more details see: https://developers.facebook.com/docs/marketing-apis/data-processing-options.
        /// </summary>
        /// <value>Processing options you would like to enable for a specific event. For more details see: https://developers.facebook.com/docs/marketing-apis/data-processing-options.</value>
        [DataMember(Name="data_processing_options", EmitDefaultValue=false)]
        public List<string> DataProcessingOptions { get; set; }

        /// <summary>
        /// The country that you want to associate to this data processing option. If you set a country, you must also set a state. For more details see: https://developers.facebook.com/docs/marketing-apis/data-processing-options
        /// </summary>
        /// <value>The country that you want to associate to this data processing option. If you set a country, you must also set a state. For more details see: https://developers.facebook.com/docs/marketing-apis/data-processing-options</value>
        [DataMember(Name="data_processing_options_country", EmitDefaultValue=false)]
        public int DataProcessingOptionsCountry { get; set; }

        /// <summary>
        /// The state that you want to associate with this data processing option. For more details see: https://developers.facebook.com/docs/marketing-apis/data-processing-options.
        /// </summary>
        /// <value>The state that you want to associate with this data processing option. For more details see: https://developers.facebook.com/docs/marketing-apis/data-processing-options.</value>
        [DataMember(Name="data_processing_options_state", EmitDefaultValue=false)]
        public int DataProcessingOptionsState { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelEvent {\n");
            sb.Append("  EventName: ").Append(EventName).Append("\n");
            sb.Append("  EventTime: ").Append(EventTime).Append("\n");
            sb.Append("  EventSourceUrl: ").Append(EventSourceUrl).Append("\n");
            sb.Append("  OptOut: ").Append(OptOut).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  ActionSource: ").Append(ActionSource).Append("\n");
            sb.Append("  UserData: ").Append(UserData).Append("\n");
            sb.Append("  CustomData: ").Append(CustomData).Append("\n");
            sb.Append("  DataProcessingOptions: ").Append(DataProcessingOptions).Append("\n");
            sb.Append("  DataProcessingOptionsCountry: ").Append(DataProcessingOptionsCountry).Append("\n");
            sb.Append("  DataProcessingOptionsState: ").Append(DataProcessingOptionsState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ModelEvent);
        }

        /// <summary>
        /// Returns true if ModelEvent instances are equal
        /// </summary>
        /// <param name="input">Instance of ModelEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelEvent input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EventName == input.EventName ||
                    (this.EventName != null &&
                    this.EventName.Equals(input.EventName))
                ) && 
                (
                    this.EventTime == input.EventTime ||
                    (this.EventTime != null &&
                    this.EventTime.Equals(input.EventTime))
                ) && 
                (
                    this.EventSourceUrl == input.EventSourceUrl ||
                    (this.EventSourceUrl != null &&
                    this.EventSourceUrl.Equals(input.EventSourceUrl))
                ) && 
                (
                    this.OptOut == input.OptOut ||
                    (this.OptOut != null &&
                    this.OptOut.Equals(input.OptOut))
                ) && 
                (
                    this.EventId == input.EventId ||
                    (this.EventId != null &&
                    this.EventId.Equals(input.EventId))
                ) && 
                (
                    this.ActionSource == input.ActionSource ||
                    (this.ActionSource != null &&
                    this.ActionSource.Equals(input.ActionSource))
                ) && 
                (
                    this.UserData == input.UserData ||
                    (this.UserData != null &&
                    this.UserData.Equals(input.UserData))
                ) && 
                (
                    this.CustomData == input.CustomData ||
                    (this.CustomData != null &&
                    this.CustomData.Equals(input.CustomData))
                ) && 
                (
                    this.DataProcessingOptions == input.DataProcessingOptions ||
                    this.DataProcessingOptions != null &&
                    input.DataProcessingOptions != null &&
                    this.DataProcessingOptions.SequenceEqual(input.DataProcessingOptions)
                ) && 
                (
                    this.DataProcessingOptionsCountry == input.DataProcessingOptionsCountry ||
                    (this.DataProcessingOptionsCountry != null &&
                    this.DataProcessingOptionsCountry.Equals(input.DataProcessingOptionsCountry))
                ) && 
                (
                    this.DataProcessingOptionsState == input.DataProcessingOptionsState ||
                    (this.DataProcessingOptionsState != null &&
                    this.DataProcessingOptionsState.Equals(input.DataProcessingOptionsState))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EventName != null)
                    hashCode = hashCode * 59 + this.EventName.GetHashCode();
                if (this.EventTime != null)
                    hashCode = hashCode * 59 + this.EventTime.GetHashCode();
                if (this.EventSourceUrl != null)
                    hashCode = hashCode * 59 + this.EventSourceUrl.GetHashCode();
                if (this.OptOut != null)
                    hashCode = hashCode * 59 + this.OptOut.GetHashCode();
                if (this.EventId != null)
                    hashCode = hashCode * 59 + this.EventId.GetHashCode();
                if (this.ActionSource != null)
                    hashCode = hashCode * 59 + this.ActionSource.GetHashCode();
                if (this.UserData != null)
                    hashCode = hashCode * 59 + this.UserData.GetHashCode();
                if (this.CustomData != null)
                    hashCode = hashCode * 59 + this.CustomData.GetHashCode();
                if (this.DataProcessingOptions != null)
                    hashCode = hashCode * 59 + this.DataProcessingOptions.GetHashCode();
                if (this.DataProcessingOptionsCountry != null)
                    hashCode = hashCode * 59 + this.DataProcessingOptionsCountry.GetHashCode();
                if (this.DataProcessingOptionsState != null)
                    hashCode = hashCode * 59 + this.DataProcessingOptionsState.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
