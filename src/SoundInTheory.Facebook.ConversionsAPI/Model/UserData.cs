/*
 * Facebook Conversions API (for Web)
 *
 * The Conversions API (for web) allows advertisers to send web events from their servers directly to Facebook. Conversions API events are linked to a pixel and are processed like browser pixel events. This means that these conversion events are used in measurement, reporting, and optimization in the same way as browser pixel events.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: web_signals_integrations@fb.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SoundInTheory.Facebook.ConversionsAPI.Client.OpenAPIDateConverter;

namespace SoundInTheory.Facebook.ConversionsAPI.Model
{
    /// <summary>
    /// user_data is a set of identifiers Facebook can use for targeted attribution. You must provide at least one of the following user_data keys in your request
    /// </summary>
    [DataContract]
    public partial class UserData :  IEquatable<UserData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserData" /> class.
        /// </summary>
        /// <param name="em">A hashed email address in lower case using SHA-256 algorithm..</param>
        /// <param name="ph">A hashed phone number using SHA-256 algorithm. Include only digits with country code, area code, and number..</param>
        /// <param name="ge">A hashed gender (f or m) using SHA-256 algorithm..</param>
        /// <param name="db">A hashed date of birth given as year, month, and day using SHA-256 algorithm.</param>
        /// <param name="ln">A hashed last name in lowercase using SHA-256 algorithm..</param>
        /// <param name="fn">A hashed first name in lowercase using SHA-256 algorithm..</param>
        /// <param name="ct">A hashed city in lower-case without spaces or punctuation using SHA-256 algorithm..</param>
        /// <param name="country">A hashed two-letter country code in lowercase using SHA-256 algorithm..</param>
        /// <param name="st">A hashed two-letter state code in lowercase using SHA-256 algorithm..</param>
        /// <param name="zp">A hashed zip code using SHA-256 algorithm. If you are in the United States, this is a five-digit zip code. For other locations, follow each country&#39;s standards..</param>
        /// <param name="externalId">Any unique ID from the advertiser, such as loyalty membership IDs, user IDs, and external cookie IDs. If External ID is being sent via other channels, it should be sent in the same format via Conversions API. Hashing external_id using SHA-256 algorithm is optional..</param>
        /// <param name="clientIpAddress">The IP address of the browser corresponding to the event..</param>
        /// <param name="clientUserAgent">The user agent for the browser corresponding to the event..</param>
        /// <param name="fbc">The Facebook click ID value stored in the _fbc browser cookie under your domain. See Managing fbc and fbp Parameters for how to get this value (https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/fbp-and-fbc), or generate this value from a fbclid query parameter..</param>
        /// <param name="fbp">The Facebook browser ID value stored in the _fbp browser cookie under your domain. See Managing fbc and fbp Parameters for how to get this value (https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/fbp-and-fbc)..</param>
        /// <param name="subscriptionId">The subscription ID for the user in this transaction. This is similar to the order ID for an individual product..</param>
        public UserData(string em = default(string), string ph = default(string), string ge = default(string), string db = default(string), string ln = default(string), string fn = default(string), string ct = default(string), string country = default(string), string st = default(string), string zp = default(string), string externalId = default(string), string clientIpAddress = default(string), string clientUserAgent = default(string), string fbc = default(string), string fbp = default(string), string subscriptionId = default(string))
        {
            this.Em = em;
            this.Ph = ph;
            this.Ge = ge;
            this.Db = db;
            this.Ln = ln;
            this.Fn = fn;
            this.Ct = ct;
            this.Country = country;
            this.St = st;
            this.Zp = zp;
            this.ExternalId = externalId;
            this.ClientIpAddress = clientIpAddress;
            this.ClientUserAgent = clientUserAgent;
            this.Fbc = fbc;
            this.Fbp = fbp;
            this.SubscriptionId = subscriptionId;
        }

        /// <summary>
        /// A hashed email address in lower case using SHA-256 algorithm.
        /// </summary>
        /// <value>A hashed email address in lower case using SHA-256 algorithm.</value>
        [DataMember(Name="em", EmitDefaultValue=false)]
        public string Em { get; set; }

        /// <summary>
        /// A hashed phone number using SHA-256 algorithm. Include only digits with country code, area code, and number.
        /// </summary>
        /// <value>A hashed phone number using SHA-256 algorithm. Include only digits with country code, area code, and number.</value>
        [DataMember(Name="ph", EmitDefaultValue=false)]
        public string Ph { get; set; }

        /// <summary>
        /// A hashed gender (f or m) using SHA-256 algorithm.
        /// </summary>
        /// <value>A hashed gender (f or m) using SHA-256 algorithm.</value>
        [DataMember(Name="ge", EmitDefaultValue=false)]
        public string Ge { get; set; }

        /// <summary>
        /// A hashed date of birth given as year, month, and day using SHA-256 algorithm
        /// </summary>
        /// <value>A hashed date of birth given as year, month, and day using SHA-256 algorithm</value>
        [DataMember(Name="db", EmitDefaultValue=false)]
        public string Db { get; set; }

        /// <summary>
        /// A hashed last name in lowercase using SHA-256 algorithm.
        /// </summary>
        /// <value>A hashed last name in lowercase using SHA-256 algorithm.</value>
        [DataMember(Name="ln", EmitDefaultValue=false)]
        public string Ln { get; set; }

        /// <summary>
        /// A hashed first name in lowercase using SHA-256 algorithm.
        /// </summary>
        /// <value>A hashed first name in lowercase using SHA-256 algorithm.</value>
        [DataMember(Name="fn", EmitDefaultValue=false)]
        public string Fn { get; set; }

        /// <summary>
        /// A hashed city in lower-case without spaces or punctuation using SHA-256 algorithm.
        /// </summary>
        /// <value>A hashed city in lower-case without spaces or punctuation using SHA-256 algorithm.</value>
        [DataMember(Name="ct", EmitDefaultValue=false)]
        public string Ct { get; set; }

        /// <summary>
        /// A hashed two-letter country code in lowercase using SHA-256 algorithm.
        /// </summary>
        /// <value>A hashed two-letter country code in lowercase using SHA-256 algorithm.</value>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// A hashed two-letter state code in lowercase using SHA-256 algorithm.
        /// </summary>
        /// <value>A hashed two-letter state code in lowercase using SHA-256 algorithm.</value>
        [DataMember(Name="st", EmitDefaultValue=false)]
        public string St { get; set; }

        /// <summary>
        /// A hashed zip code using SHA-256 algorithm. If you are in the United States, this is a five-digit zip code. For other locations, follow each country&#39;s standards.
        /// </summary>
        /// <value>A hashed zip code using SHA-256 algorithm. If you are in the United States, this is a five-digit zip code. For other locations, follow each country&#39;s standards.</value>
        [DataMember(Name="zp", EmitDefaultValue=false)]
        public string Zp { get; set; }

        /// <summary>
        /// Any unique ID from the advertiser, such as loyalty membership IDs, user IDs, and external cookie IDs. If External ID is being sent via other channels, it should be sent in the same format via Conversions API. Hashing external_id using SHA-256 algorithm is optional.
        /// </summary>
        /// <value>Any unique ID from the advertiser, such as loyalty membership IDs, user IDs, and external cookie IDs. If External ID is being sent via other channels, it should be sent in the same format via Conversions API. Hashing external_id using SHA-256 algorithm is optional.</value>
        [DataMember(Name="external_id", EmitDefaultValue=false)]
        public string ExternalId { get; set; }

        /// <summary>
        /// The IP address of the browser corresponding to the event.
        /// </summary>
        /// <value>The IP address of the browser corresponding to the event.</value>
        [DataMember(Name="client_ip_address", EmitDefaultValue=false)]
        public string ClientIpAddress { get; set; }

        /// <summary>
        /// The user agent for the browser corresponding to the event.
        /// </summary>
        /// <value>The user agent for the browser corresponding to the event.</value>
        [DataMember(Name="client_user_agent", EmitDefaultValue=false)]
        public string ClientUserAgent { get; set; }

        /// <summary>
        /// The Facebook click ID value stored in the _fbc browser cookie under your domain. See Managing fbc and fbp Parameters for how to get this value (https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/fbp-and-fbc), or generate this value from a fbclid query parameter.
        /// </summary>
        /// <value>The Facebook click ID value stored in the _fbc browser cookie under your domain. See Managing fbc and fbp Parameters for how to get this value (https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/fbp-and-fbc), or generate this value from a fbclid query parameter.</value>
        [DataMember(Name="fbc", EmitDefaultValue=false)]
        public string Fbc { get; set; }

        /// <summary>
        /// The Facebook browser ID value stored in the _fbp browser cookie under your domain. See Managing fbc and fbp Parameters for how to get this value (https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/fbp-and-fbc).
        /// </summary>
        /// <value>The Facebook browser ID value stored in the _fbp browser cookie under your domain. See Managing fbc and fbp Parameters for how to get this value (https://developers.facebook.com/docs/marketing-api/conversions-api/parameters/fbp-and-fbc).</value>
        [DataMember(Name="fbp", EmitDefaultValue=false)]
        public string Fbp { get; set; }

        /// <summary>
        /// The subscription ID for the user in this transaction. This is similar to the order ID for an individual product.
        /// </summary>
        /// <value>The subscription ID for the user in this transaction. This is similar to the order ID for an individual product.</value>
        [DataMember(Name="subscription_id", EmitDefaultValue=false)]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserData {\n");
            sb.Append("  Em: ").Append(Em).Append("\n");
            sb.Append("  Ph: ").Append(Ph).Append("\n");
            sb.Append("  Ge: ").Append(Ge).Append("\n");
            sb.Append("  Db: ").Append(Db).Append("\n");
            sb.Append("  Ln: ").Append(Ln).Append("\n");
            sb.Append("  Fn: ").Append(Fn).Append("\n");
            sb.Append("  Ct: ").Append(Ct).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  St: ").Append(St).Append("\n");
            sb.Append("  Zp: ").Append(Zp).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  ClientIpAddress: ").Append(ClientIpAddress).Append("\n");
            sb.Append("  ClientUserAgent: ").Append(ClientUserAgent).Append("\n");
            sb.Append("  Fbc: ").Append(Fbc).Append("\n");
            sb.Append("  Fbp: ").Append(Fbp).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserData);
        }

        /// <summary>
        /// Returns true if UserData instances are equal
        /// </summary>
        /// <param name="input">Instance of UserData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserData input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Em == input.Em ||
                    (this.Em != null &&
                    this.Em.Equals(input.Em))
                ) && 
                (
                    this.Ph == input.Ph ||
                    (this.Ph != null &&
                    this.Ph.Equals(input.Ph))
                ) && 
                (
                    this.Ge == input.Ge ||
                    (this.Ge != null &&
                    this.Ge.Equals(input.Ge))
                ) && 
                (
                    this.Db == input.Db ||
                    (this.Db != null &&
                    this.Db.Equals(input.Db))
                ) && 
                (
                    this.Ln == input.Ln ||
                    (this.Ln != null &&
                    this.Ln.Equals(input.Ln))
                ) && 
                (
                    this.Fn == input.Fn ||
                    (this.Fn != null &&
                    this.Fn.Equals(input.Fn))
                ) && 
                (
                    this.Ct == input.Ct ||
                    (this.Ct != null &&
                    this.Ct.Equals(input.Ct))
                ) && 
                (
                    this.Country == input.Country ||
                    (this.Country != null &&
                    this.Country.Equals(input.Country))
                ) && 
                (
                    this.St == input.St ||
                    (this.St != null &&
                    this.St.Equals(input.St))
                ) && 
                (
                    this.Zp == input.Zp ||
                    (this.Zp != null &&
                    this.Zp.Equals(input.Zp))
                ) && 
                (
                    this.ExternalId == input.ExternalId ||
                    (this.ExternalId != null &&
                    this.ExternalId.Equals(input.ExternalId))
                ) && 
                (
                    this.ClientIpAddress == input.ClientIpAddress ||
                    (this.ClientIpAddress != null &&
                    this.ClientIpAddress.Equals(input.ClientIpAddress))
                ) && 
                (
                    this.ClientUserAgent == input.ClientUserAgent ||
                    (this.ClientUserAgent != null &&
                    this.ClientUserAgent.Equals(input.ClientUserAgent))
                ) && 
                (
                    this.Fbc == input.Fbc ||
                    (this.Fbc != null &&
                    this.Fbc.Equals(input.Fbc))
                ) && 
                (
                    this.Fbp == input.Fbp ||
                    (this.Fbp != null &&
                    this.Fbp.Equals(input.Fbp))
                ) && 
                (
                    this.SubscriptionId == input.SubscriptionId ||
                    (this.SubscriptionId != null &&
                    this.SubscriptionId.Equals(input.SubscriptionId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Em != null)
                    hashCode = hashCode * 59 + this.Em.GetHashCode();
                if (this.Ph != null)
                    hashCode = hashCode * 59 + this.Ph.GetHashCode();
                if (this.Ge != null)
                    hashCode = hashCode * 59 + this.Ge.GetHashCode();
                if (this.Db != null)
                    hashCode = hashCode * 59 + this.Db.GetHashCode();
                if (this.Ln != null)
                    hashCode = hashCode * 59 + this.Ln.GetHashCode();
                if (this.Fn != null)
                    hashCode = hashCode * 59 + this.Fn.GetHashCode();
                if (this.Ct != null)
                    hashCode = hashCode * 59 + this.Ct.GetHashCode();
                if (this.Country != null)
                    hashCode = hashCode * 59 + this.Country.GetHashCode();
                if (this.St != null)
                    hashCode = hashCode * 59 + this.St.GetHashCode();
                if (this.Zp != null)
                    hashCode = hashCode * 59 + this.Zp.GetHashCode();
                if (this.ExternalId != null)
                    hashCode = hashCode * 59 + this.ExternalId.GetHashCode();
                if (this.ClientIpAddress != null)
                    hashCode = hashCode * 59 + this.ClientIpAddress.GetHashCode();
                if (this.ClientUserAgent != null)
                    hashCode = hashCode * 59 + this.ClientUserAgent.GetHashCode();
                if (this.Fbc != null)
                    hashCode = hashCode * 59 + this.Fbc.GetHashCode();
                if (this.Fbp != null)
                    hashCode = hashCode * 59 + this.Fbp.GetHashCode();
                if (this.SubscriptionId != null)
                    hashCode = hashCode * 59 + this.SubscriptionId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
